// Base API
// ========


// Size [function]
// ---------------
/// Access a named size in your `$sizes` map,
/// using any comparable units.
///
/// @group sizes
///
/// @param {String | Length | List} $size -
///   The name of a size in your configuration (e.g. `line-height`),
///   or a length to be converted into different units (e.g. `24px`),
///   or a base-size and adjustments to be made
///   (e.g. `24px ('minor-third': 2)`).
///   For the sake of consistent documentation,
///   I recommend keeping adjustments in the configuration
///   whenever possible.
/// @param {String} $unit [$default-units] -
///   The desired units for the output (e.g. `px` or `rem`).
/// @throw -
///   The calculated value is not a valid CSS length.
/// @return {Length} -
///   The calculated length, in the requested units.
@function size(
  $size,
  $unit: $default-units
) {
  // Parse arguments
  $size: map-get($sizes, $size) or $size;
  $base: nth($size, 1);
  $adjust: if(length($size) > 1, nth($size, 2), ());

  // Recursive check
  $size: if(map-has-key($sizes, $base), size($base, false), $base);

  // Adjustments
  @each $ratio, $value in $adjust {
    $ratio: _get-ratio($ratio);
    @if $ratio == 'linear' {
      $size: $size * $value;
    } @else {
      $multiplier: _accoutrement-pow($ratio, $value);
      $size: round($size * $multiplier);
    }
  }

  // Validation
  @if type-of($size) != 'number' {
    @error '#{$size} is not a valid length for CSS.';
  }

  // Units
  @if $unit and not index('ch' 'vw' 'vh' 'vmin', unit($size)) {
    $size: convert-units($size, $unit);
  }

  // Return
  @return $size;
}


// Negative [function]
// -------------------
/// Return the negative value of any length,
/// in comparable units.
///
/// @group sizes
///
/// @param {String | Length | List} $size -
///   The name of a size in your configuration (e.g. `line-height`),
///   or a length to be converted into different units (e.g. `24px`),
///   or a base-size and adjustments to be made
///   (e.g. `24px ('minor-third': 2)`).
///   For the sake of consistent documentation,
///   I recommend keeping adjustments in the configuration
///   whenever possible.
/// @param {String} $unit [$default-units] -
///   The desired units for the output (e.g. `px` or `rem`).
/// @return {Length} -
///   The calculated negative length, in the requested units.
@function negative(
  $size,
  $unit: $default-units
) {
  @return 0 - size($size, $unit);
}


// Square [mixin]
// --------------
/// Create a square by setting equal CSS `height` and `width` properties
/// with the given size & unit value.
///
/// @group sizes
///
/// @param {String | Length | List} $size -
///   The name of a size in your configuration (e.g. `line-height`),
///   or a length to be converted into different units (e.g. `24px`),
///   or a base-size and adjustments to be made
///   (e.g. `24px ('minor-third': 2)`).
///   For the sake of consistent documentation,
///   I recommend keeping adjustments in the configuration
///   whenever possible.
/// @param {String} $unit [$default-units] -
///   The desired units for the output (e.g. `px` or `rem`).
/// @output -
///   Equal CSS height and width properties,
///   set to the given size and units.
@mixin square(
  $size,
  $unit: $default-units
) {
  $size: size($size, $unit);

  height: $size;
  width: $size;
}
